import { RiskBase } from "../../risk/interface";
import { VehicleTypeBase } from "./interface";
import { APIHandlerAuth, APIHandlerNoAuth } from "../../../utils/api";
import { PrivateApiHandler } from "../../custom";
export declare class VehicleType extends PrivateApiHandler {
    api: APIHandlerAuth | APIHandlerNoAuth;
    apiPath?: string;
    externalId?: string;
    display?: string;
    description?: string;
    isActive?: boolean;
    vehicleType?: string;
    variant?: string;
    code?: string;
    baseMsrpNew?: number;
    baseMsrpCurrent?: number;
    brand?: string;
    model?: string;
    yearFloor?: number;
    yearTop?: number;
    doors?: number;
    wheels?: number;
    autonomy?: number;
    seats?: number;
    cylinders?: number;
    valves?: number;
    valveTiming?: string;
    camType?: string;
    driveType?: string;
    transmission?: string;
    gearCount?: number;
    engineSizeML?: number;
    horsePower?: number;
    torqueNM?: number;
    engineType?: string;
    fuelType?: string;
    fuelTankCapacityML?: number;
    combinedKMPL?: number;
    cityKMPL?: number;
    combinedKMPLE?: number;
    cityKMPLE?: number;
    kwh100KM?: number;
    timeToCharge240vMins?: number;
    electricRangeKM?: number;
    warrantyBasicYears?: number;
    warrantyBasicKM?: number;
    warrantyBasicExpiry?: Date;
    warrantyDrivetrainYears?: number;
    warrantyDrivetrainKM?: number;
    warrantyDrivetrainExpiry?: Date;
    warrantyRoadsideYears?: number;
    warrantyRoadsideKM?: number;
    warrantyRoadsideExpiry?: Date;
    warrantyRustYears?: number;
    warrantyRustKM?: number;
    warrantyRustExpiry?: Date;
    warrantyFreeMaintenanceYears?: number;
    warrantyFreeMaintenanceKM?: number;
    warrantyFreeMaintenanceExpiry?: Date;
    warrantyHybridComponentYears?: number;
    warrantyHybridComponentKM?: number;
    warrantyHybridComponentExpiry?: Date;
    warrantyEVBatteryYears?: number;
    warrantyEVBatteryKM?: number;
    warrantyEVBatteryExpiry?: Date;
    lengthMM?: number;
    widthMM?: number;
    heightMM?: number;
    wheelBaseMM?: number;
    frontTrackMM?: number;
    rearTrackMM?: number;
    groundClearanceMM?: number;
    angleOfApproachDegrees?: number;
    angleOfDepartureDegrees?: number;
    turningCircleM?: number;
    dragCoefficient?: number;
    epaInteriorVolumeM3?: number;
    cargoCapacityM3?: number;
    maxCargoCapacityM3?: number;
    curbWeightKG?: number;
    grossWeightKG?: number;
    maxPayloadKG?: number;
    maxTowingCapacityKG?: number;
    id?: string;
    createdAt?: Date;
    sourceId?: string;
    imageLoc?: string;
    thumbnailLoc?: string;
    translations?: Object;
    risk?: RiskBase;
    constructor(vehicleType: VehicleTypeBase);
    private _checkId;
    getDisplay(): string;
    refresh(): Promise<void>;
    delete(): Promise<void>;
    save(fields?: Object): Promise<void>;
    update({ persist, fields }: {
        persist?: boolean;
        fields?: Object;
    }): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map