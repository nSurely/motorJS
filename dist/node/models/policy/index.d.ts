import { Config } from "./config/interface";
import { Fees } from "./fees/interface";
import { Excess } from "./excess/interface";
import { Extras } from "./extras/interface";
import { Premium } from "./premium/interface";
import { Contribution } from "./contribution/interface";
import { Final } from "./final/interface";
import { Issuer } from "./issuer/interface";
import { NoClaims } from "./noclaims/interface";
import { Rates } from "./rates/interface";
import { Rewards } from "./rewards/interface";
import { Telematics } from "./telematics/interface";
import { APIHandlerAuth, APIHandlerNoAuth } from "../../utils/api";
import { PolicyBase } from "./interface";
import { PolicyApproval } from "./approval";
import { PolicyCancellation } from "./cancellation";
import { PolicyDriver } from "./driver";
import { PolicyDuration } from "./duration";
import { PrivateApiHandler } from "../custom";
export declare class Policy extends PrivateApiHandler {
    api: APIHandlerAuth | APIHandlerNoAuth;
    apiPath?: string;
    isActivePolicy?: boolean;
    sumInsured?: number;
    canRenew?: boolean;
    cover?: string[];
    maxPassengers?: number;
    id?: string;
    createdAt?: Date;
    policyCertificateLoc?: string;
    approval?: PolicyApproval;
    cancellation?: PolicyCancellation;
    config?: Config;
    contribution?: Contribution;
    driver?: PolicyDriver;
    duration?: PolicyDuration;
    excess?: Excess;
    extras?: Extras;
    fees?: Fees;
    final?: Final;
    issuer?: Issuer;
    noClaims?: NoClaims;
    premium?: Premium;
    rates?: Rates;
    rewards?: Rewards;
    telematics?: Telematics;
    policyGroup?: string;
    constructor(policy: PolicyBase);
    isCancelled(): boolean | undefined;
    isApproved(): boolean | undefined;
    isExpired(): boolean | undefined;
    isDriverAgreed(): boolean | undefined;
    isLive(): boolean | undefined;
    ratePerKm(): number | undefined;
    premiumAmount(): number | undefined;
    private _checkId;
    refesh(): Promise<void>;
    delete(): Promise<void>;
    save(fields: Object): Promise<any>;
    update(persist: boolean | undefined, fields: Object): Promise<void>;
    create({ api, recordId, driverId, vehicleId }: {
        api: APIHandlerAuth;
        recordId: string;
        driverId?: string;
        vehicleId?: string;
    }): Promise<Policy>;
}
//# sourceMappingURL=index.d.ts.map